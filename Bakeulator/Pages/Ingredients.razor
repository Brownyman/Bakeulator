@page "/Ingredients"
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@if (Loading)
{
	<p>Loading page...</p>
}
else
{

	@if (BakingIngredients.Count() == 0)
	{
		<h4>No ingredients - click Add to start adding more</h4>
		<div>
			<MatButton @onclick="@AddDialog" Icon="add_circle_outline">Add Ingredient</MatButton>
		</div>
	}
	else
	{
		<h3>Ingredients</h3>

		<div>
			<div>
				<MatButton @onclick="@AddDialog" Icon="add_circle_outline">Add Ingredient</MatButton>
				<MatButton @onclick="@(e => { DialogIsOpen = true; SelectedAction = DialogAction.clearAll; })" Icon="clear_all" Class="float-right">Clear All Ingredients</MatButton>
			</div>
		</div>

		<MatTable Items="@BakingIngredients" Class="mat-elevation-z5" AllowSelection="true" ShowPaging="false" PageSize="100" SelectionChanged="SelectionChangedEvent">
			<MatTableHeader>
				<th width="50%">Name</th>
				<th>Quantity</th>
				<th width="20%">Unit Type</th>
				<th>Cost</th>
			</MatTableHeader>
			<MatTableRow>
				<td>@context.Name</td>
				<td>@context.Quantity</td>
				<td>@context.UnitType</td>
				<td>@context.Cost.ToString("0.##")</td>

			</MatTableRow>

		</MatTable>
		@if (ItemSelected)
		{
			<div>
				<MatButton @onclick="@EditDialog" Icon="edit" Label="Edit Ingredient"></MatButton>
				<MatButton @onclick="@(x => { DialogIsOpen = true; SelectedAction = DialogAction.Remove; })" Icon="delete_forever" Label="Remove Ingredient"></MatButton>
			</div>
		}
	}


	<MatDialog @bind-IsOpen="@DialogIsOpen">
		@if (SelectedAction == DialogAction.Add)
		{
			<MatDialogTitle>Add new Ingredient</MatDialogTitle>
			<MatDialogContent>
				<p>Ingredient Name</p>
				<MatTextField @bind-Value="@NewIngredient.Name"></MatTextField>
				<p>Unit Type</p>
				<MatTextField @bind-Value="@NewIngredient.UnitType"></MatTextField>
				<p>Amount</p>
				<MatTextField @bind-Value="@NewIngredient.Quantity"></MatTextField>
				<p>Cost</p>
				<MatTextField @bind-Value="@NewIngredient.Cost"></MatTextField>
			</MatDialogContent>
			<MatDialogActions>
				<MatButton @onclick="@AddNewIngredient">Add</MatButton>
				<MatButton @onclick="@CloseDialog">Cancel</MatButton>
			</MatDialogActions>
		}
		else if (SelectedAction == DialogAction.clearAll)
		{
			<MatDialogTitle>Are you sure?</MatDialogTitle>
			<MatDialogContent>
				<p>Clicking OK will remove all ingredients from storage, are you sure you want to continue?</p>
			</MatDialogContent>
			<MatDialogActions>
				<MatButton @onclick="@ClearDataAsync">Clear Data</MatButton>
				<MatButton @onclick="@CloseDialog">Cancel</MatButton>
			</MatDialogActions>
		}
		else if (SelectedAction == DialogAction.Remove)
		{
			<MatDialogTitle>Are you sure?</MatDialogTitle>
			<MatDialogContent>
				<p>Are you sure you want to remove @SelectedIngredient.Name?</p>
			</MatDialogContent>
			<MatDialogActions>
				<MatButton @onclick="@RemoveIngredient">Remove</MatButton>
				<MatButton @onclick="@CloseDialog">Cancel</MatButton>
			</MatDialogActions>
		}
		else if (SelectedAction == DialogAction.Edit)
		{
			<MatDialogTitle>Edit Ingredient</MatDialogTitle>
			<MatDialogContent>
				<p>Ingredient Name</p>
				<MatTextField @bind-Value="@SelectedIngredientForEdit.Name"></MatTextField>
				<p>Unit Type</p>
				<MatTextField @bind-Value="@SelectedIngredientForEdit.UnitType"></MatTextField>
				<p>Amount</p>
				<MatTextField @bind-Value="@SelectedIngredientForEdit.Quantity"></MatTextField>
				<p>Cost</p>
				<MatTextField @bind-Value="@SelectedIngredientForEdit.Cost"></MatTextField>
			</MatDialogContent>
			<MatDialogActions>
				<MatButton @onclick="@EditIngredient">Update</MatButton>
				<MatButton @onclick="@CloseDialog">Cancel</MatButton>
			</MatDialogActions>
		}
	</MatDialog>
}




@code {

	private List<Ingredient> BakingIngredients = new List<Ingredient>();
	private bool Loading = true;
	private bool DialogIsOpen = false;

	private bool ItemSelected = false;
	private Ingredient SelectedIngredient { get; set; }
	private Ingredient SelectedIngredientForEdit { get; set; }
	private DialogAction SelectedAction { get; set; }

	private Ingredient NewIngredient { get; set; }

	private enum DialogAction
	{
		NoneSelected,
		Add,
		Edit,
		Remove,
		clearAll
	}

	protected override async Task OnInitializedAsync()
	{
		var returnUser = await localStorage.GetItemAsync<bool>("returnUser");
		var ingredients = await localStorage.GetItemAsync<List<Ingredient>>("ingredients");
		if (ingredients == null)
		{

			var defaultIngredients = new List<Ingredient>();
			if (!returnUser)
			{
				await localStorage.SetItemAsync("returnUser", true);

				defaultIngredients.Add(new Ingredient("Eggs", "Individual", 12, 1.50));
				defaultIngredients.Add(new Ingredient("Flour", "Kgs", 10, 10));
				defaultIngredients.Add(new Ingredient("Baking Butter", "Kgs", 2, 2.50));
				defaultIngredients.Add(new Ingredient("Caster Sugar", "Kgs", 2, 3.50));
				defaultIngredients.Add(new Ingredient("Food Colouring", "mls", 200, 2.75));
				defaultIngredients.Add(new Ingredient("Fondant", "Kgs", 1, 2.50));
				defaultIngredients.Add(new Ingredient("Icing Sugar", "Kgs", 12, 1.50));
				defaultIngredients.Add(new Ingredient("Cupcake Box(6)", "Individual", 12, 1.50));
				defaultIngredients.Add(new Ingredient("Cupcake Box(12)", "Individual", 12, 1.50));
				defaultIngredients.Add(new Ingredient("Cake Box", "Individual", 12, 1.50));
				defaultIngredients.Add(new Ingredient("Flavouring", "mls", 12, 1.50));
				defaultIngredients.Add(new Ingredient("Sweets", "Individual", 12, 1.50));
				defaultIngredients.Add(new Ingredient("Chocolatae", "kgs", 1.5, 3.50));
				defaultIngredients.Add(new Ingredient("Cake Topper", "Individual", 1, 3.50));
				BakingIngredients = defaultIngredients;
				await SaveData();
			}
			else
			{
				BakingIngredients = defaultIngredients;
			}
		}
		else
		{
			BakingIngredients = ingredients;
		}

		Loading = false;
	}

	private async Task SaveData()
	{
		await localStorage.SetItemAsync("ingredients", BakingIngredients);
	}

	private async Task ClearDataAsync()
	{
		await localStorage.RemoveItemAsync("ingredients");
		await CloseDialog();
		BakingIngredients = new List<Ingredient>();
	}

	private async Task RemoveIngredient()
	{
		BakingIngredients.Remove(SelectedIngredient);
		await SaveData();
		await CloseDialog();
		SelectedIngredient = null;
		ItemSelected = false;
	}

	private void SelectionChangedEvent(object row)
	{
		if (row == null)
		{
			ItemSelected = false;
			SelectedIngredient = null;
		}
		else
		{
			ItemSelected = true;
			SelectedIngredient = (Ingredient)row;
		}
		this.StateHasChanged();
	}


	private async Task AddDialog()
	{
		DialogIsOpen = true;
		SelectedAction = DialogAction.Add;
		NewIngredient = new Ingredient();
	}

	private async Task AddNewIngredient()
	{
		if (NewIngredient != null)
		{
			BakingIngredients.Add(NewIngredient);
			await SaveData();
		}
		await CloseDialog();
	}

	private async Task EditDialog()
	{
		SelectedIngredientForEdit = new Ingredient(SelectedIngredient.Name, SelectedIngredient.UnitType, SelectedIngredient.Quantity, SelectedIngredient.Cost);
		DialogIsOpen = true;
		SelectedAction = DialogAction.Edit;
	}

	private async Task EditIngredient()
	{
		var item = BakingIngredients.FirstOrDefault(item => item == SelectedIngredient);

		item.Name = SelectedIngredientForEdit.Name;
		item.UnitType = SelectedIngredientForEdit.UnitType;
		item.Quantity = SelectedIngredientForEdit.Quantity;
		item.Cost = SelectedIngredientForEdit.Cost;

		SelectedIngredient = SelectedIngredientForEdit;
		await SaveData();
		await CloseDialog();

	}

	private async Task CloseDialog()
	{
		DialogIsOpen = false;
		SelectedAction = DialogAction.NoneSelected;
	}
}
